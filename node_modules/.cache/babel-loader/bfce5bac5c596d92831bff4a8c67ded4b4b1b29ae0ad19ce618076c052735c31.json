{"ast":null,"code":"var _jsxFileName = \"/Users/unne/Documents/GitHub/Coachapp/src/components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport LoaderSpinner from \"../components/LoaderSpinner.js\";\nimport \"../styles/weather.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun, faCloud, faCloudShowersHeavy, faSnowflake } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = ({\n  sessionDate,\n  sessionTime\n}) => {\n  _s();\n  const [userLocation, setUserLocation] = useState({\n    latitude: 57.708870,\n    longitude: 11.974560\n  });\n  const [weatherData, setWeatherData] = useState(null);\n  const API_KEY = '19c737dffbd944c5114401ce4fb6d57a';\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (!userLocation) {\n          setUserLocation({\n            latitude: 57.708870,\n            longitude: 11.974560\n          });\n          console.log(\"jag går in här\");\n        }\n        ;\n        const {\n          latitude,\n          longitude\n        } = userLocation;\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`);\n        if (response.ok) {\n          const data = await response.json();\n          setWeatherData(data);\n        } else {\n          console.error(\"Failed to fetch weather data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n    if (userLocation) {\n      fetchWeatherData();\n    }\n  }, [userLocation]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      });\n    }\n  }, []);\n  const getWeatherEmoji = weather => {\n    switch (weather) {\n      case \"Clear\":\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faSun\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 16\n        }, this);\n      case \"Clouds\":\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faCloud\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 16\n        }, this);\n      case \"Rain\":\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faCloudShowersHeavy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 16\n        }, this);\n      case \"Snow\":\n        return /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faSnowflake\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  if (!weatherData) {\n    return /*#__PURE__*/_jsxDEV(LoaderSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Hitta det närmaste väderdataobjektet i listan\n  const closestWeatherData = weatherData.list.reduce((closest, current) => {\n    const closestTimeDiff = Math.abs(new Date(closest.dt_txt) - new Date(`${sessionDate}T${sessionTime}`));\n    const currentTimeDiff = Math.abs(new Date(current.dt_txt) - new Date(`${sessionDate}T${sessionTime}`));\n    return currentTimeDiff < closestTimeDiff ? current : closest;\n  });\n  console.log(closestWeatherData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getWeatherEmoji(closestWeatherData.weather[0].main)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"weather-celsius\",\n        children: [Math.round(closestWeatherData.main.temp), \" \\xBAC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, closestWeatherData.dt, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"yY8aqhp5vc+y8K096U7NMb3ogUg=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","LoaderSpinner","FontAwesomeIcon","faSun","faCloud","faCloudShowersHeavy","faSnowflake","jsxDEV","_jsxDEV","Weather","sessionDate","sessionTime","_s","userLocation","setUserLocation","latitude","longitude","weatherData","setWeatherData","API_KEY","fetchWeatherData","console","log","response","fetch","ok","data","json","error","navigator","geolocation","getCurrentPosition","position","coords","getWeatherEmoji","weather","icon","fileName","_jsxFileName","lineNumber","columnNumber","closestWeatherData","list","reduce","closest","current","closestTimeDiff","Math","abs","Date","dt_txt","currentTimeDiff","children","className","main","id","round","temp","dt","_c","$RefreshReg$"],"sources":["/Users/unne/Documents/GitHub/Coachapp/src/components/Weather.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport LoaderSpinner from \"../components/LoaderSpinner.js\"\nimport \"../styles/weather.css\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun, faCloud, faCloudShowersHeavy, faSnowflake } from '@fortawesome/free-solid-svg-icons';\n\nconst Weather = ({ sessionDate, sessionTime }) => {\n  const [userLocation, setUserLocation] = useState({latitude:57.708870, longitude: 11.974560}); \n\n  const [weatherData, setWeatherData] = useState(null);\n  const API_KEY = '19c737dffbd944c5114401ce4fb6d57a';\n\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        \n        if (!userLocation) {\n            setUserLocation({latitude:57.708870, longitude: 11.974560}) \n            console.log(\"jag går in här\")\n        };\n        \n        const { latitude, longitude } = userLocation;\n  \n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`\n        );\n  \n        if (response.ok) {\n          const data = await response.json();\n          setWeatherData(data);\n        } else {\n          console.error(\"Failed to fetch weather data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n\n    if (userLocation) {\n      fetchWeatherData();\n    }\n  }, [userLocation]);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        });\n      });\n    }\n  }, []);\n\n  const getWeatherEmoji = (weather) => {\n    switch (weather) {\n      case \"Clear\":\n        return <FontAwesomeIcon icon={faSun} />;\n      case \"Clouds\":\n        return <FontAwesomeIcon icon={faCloud} />;\n      case \"Rain\":\n        return <FontAwesomeIcon icon={faCloudShowersHeavy} />;\n      case \"Snow\":\n        return <FontAwesomeIcon icon={faSnowflake} />;\n      default:\n        return null;\n    }\n  };\n\n  if (!weatherData) {\n    return <LoaderSpinner/>;\n  }\n\n  // Hitta det närmaste väderdataobjektet i listan\n  const closestWeatherData = weatherData.list.reduce((closest, current) => {\n  \n    const closestTimeDiff = Math.abs(new Date(closest.dt_txt) - new Date(`${sessionDate}T${sessionTime}`));\n    const currentTimeDiff = Math.abs(new Date(current.dt_txt) - new Date(`${sessionDate}T${sessionTime}`));\n\n    return currentTimeDiff < closestTimeDiff ? current : closest;\n  });\n  console.log(closestWeatherData)\n  return (\n    <div>\n      <div className=\"weather-wrapper\" key={closestWeatherData.dt}>\n        <p>{getWeatherEmoji(closestWeatherData.weather[0].main)}</p>\n        <p id=\"weather-celsius\">{Math.round(closestWeatherData.main.temp)} ºC</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}