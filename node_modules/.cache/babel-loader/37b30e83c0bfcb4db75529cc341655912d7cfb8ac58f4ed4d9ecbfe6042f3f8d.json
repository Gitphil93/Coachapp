{"ast":null,"code":"var _jsxFileName = \"/Users/unne/Documents/GitHub/Coachapp/src/components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = ({\n  sessionDate,\n  sessionTime\n}) => {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const API_KEY = '19c737dffbd944c5114401ce4fb6d57a';\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (!userLocation) return;\n        const {\n          latitude,\n          longitude\n        } = userLocation;\n        const sessionDateTime = new Date(`${sessionDate}T${sessionTime}`);\n        const sessionTimestamp = Math.round(sessionDateTime.getTime() / 1000);\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`);\n        if (response.ok) {\n          const data = await response.json();\n          setWeatherData(data);\n        } else {\n          console.error(\"Failed to fetch weather data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n    if (userLocation) {\n      fetchWeatherData();\n    }\n  }, [userLocation, sessionDate, sessionTime]);\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      });\n    }\n  }, []);\n  const getWeatherEmoji = weather => {\n    switch (weather) {\n      case \"Clear\":\n        return \"‚òÄÔ∏è\";\n      case \"Clouds\":\n        return \"‚òÅÔ∏è\";\n      case \"Rain\":\n        return \"üåßÔ∏è\";\n      case \"Snow\":\n        return \"‚ùÑÔ∏è\";\n      default:\n        return \"\";\n    }\n  };\n  if (!weatherData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading weather...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Hitta v√§derinformation f√∂r den angivna sessiontidpunkten\n  const sessionWeatherData = weatherData.list.find(weatherItem => {\n    const weatherDateTime = new Date(weatherItem.dt_txt);\n    return weatherDateTime.getDate() === new Date(sessionDate).getDate() && weatherDateTime.getHours() === new Date(sessionTime).getHours();\n  });\n  if (!sessionWeatherData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No weather data available for the selected session.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [getWeatherEmoji(sessionWeatherData.weather[0].main), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, sessionWeatherData.dt, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"iZ/HrBjKBnycehLQN+graYNsBSY=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Weather","sessionDate","sessionTime","_s","userLocation","setUserLocation","weatherData","setWeatherData","API_KEY","fetchWeatherData","latitude","longitude","sessionDateTime","Date","sessionTimestamp","Math","round","getTime","response","fetch","ok","data","json","console","error","navigator","geolocation","getCurrentPosition","position","coords","getWeatherEmoji","weather","children","fileName","_jsxFileName","lineNumber","columnNumber","sessionWeatherData","list","find","weatherItem","weatherDateTime","dt_txt","getDate","getHours","main","dt","_c","$RefreshReg$"],"sources":["/Users/unne/Documents/GitHub/Coachapp/src/components/Weather.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Weather = ({ sessionDate, sessionTime }) => {\n  const [userLocation, setUserLocation] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const API_KEY = '19c737dffbd944c5114401ce4fb6d57a';\n\n  useEffect(() => {\n    const fetchWeatherData = async () => {\n      try {\n        if (!userLocation) return;\n        \n        const { latitude, longitude } = userLocation;\n     \n        const sessionDateTime = new Date(`${sessionDate}T${sessionTime}`);\n        const sessionTimestamp = Math.round(sessionDateTime.getTime() / 1000);\n  \n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${API_KEY}`\n        );\n  \n        if (response.ok) {\n          const data = await response.json();\n          setWeatherData(data);\n        } else {\n          console.error(\"Failed to fetch weather data\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n\n    if (userLocation) {\n      fetchWeatherData();\n    }\n  }, [userLocation, sessionDate, sessionTime]);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        });\n      });\n    }\n  }, []);\n\n  const getWeatherEmoji = (weather) => {\n    switch (weather) {\n      case \"Clear\":\n        return \"‚òÄÔ∏è\";\n      case \"Clouds\":\n        return \"‚òÅÔ∏è\";\n      case \"Rain\":\n        return \"üåßÔ∏è\";\n      case \"Snow\":\n        return \"‚ùÑÔ∏è\";\n      default:\n        return \"\";\n    }\n  };\n\n  if (!weatherData) {\n    return <p>Loading weather...</p>;\n  }\n\n  // Hitta v√§derinformation f√∂r den angivna sessiontidpunkten\n  const sessionWeatherData = weatherData.list.find((weatherItem) => {\n    const weatherDateTime = new Date(weatherItem.dt_txt);\n    return (\n      weatherDateTime.getDate() === new Date(sessionDate).getDate() &&\n      weatherDateTime.getHours() === new Date(sessionTime).getHours()\n    );\n  });\n\n  if (!sessionWeatherData) {\n    return <p>No weather data available for the selected session.</p>;\n  }\n\n  return (\n    <div>\n      <div key={sessionWeatherData.dt}>\n        <p>{getWeatherEmoji(sessionWeatherData.weather[0].main)} </p>\n        {/* Add more weather information as needed */}\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}